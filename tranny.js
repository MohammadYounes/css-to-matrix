// Generated by CoffeeScript 1.6.3
(function() {
  var Matrix, copy, defaultMatrix, extend, umd;

  umd = function(factory) {
    if (typeof exports === 'object') {
      return module.exports = factory;
    } else if (typeof define === 'function' && define.amd) {
      return define([], factory);
    } else {
      return this.izzy = factory;
    }
  };

  copy = function(array) {
    return array.slice();
  };

  extend = function(a, b) {
    var key;
    for (key in b) {
      a[key] = b[key];
    }
    return a;
  };

  defaultMatrix = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];

  Matrix = function(data) {
    return this.setData(data);
  };

  extend(Matrix.prototype, {
    _data: {
      matrix: copy(defaultMatrix),
      transformations: {
        perspective: 0,
        rotate: {
          x: 0,
          y: 0,
          z: 0,
          a: 0
        },
        scale: {
          x: 1,
          y: 1,
          z: 1
        },
        skew: {
          x: 0,
          y: 0
        },
        translate: {
          x: 0,
          y: 0,
          z: 0
        }
      }
    },
    setData: function(_data) {
      this._data = _data;
    },
    apply: function() {
      var a, c, data, i, matrix, perspective, rotate, rs, s, scale, skew, sx, sy, transformations, translate, u, v, w;
      data = this._data;
      matrix = data.matrix;
      transformations = data.transformations;
      perspective = transformations.perspective;
      matrix[2][3] = perspective ? -1 / perspective : 0;
      translate = transformations.translate;
      matrix[3][0] = translate.x;
      matrix[3][1] = translate.y;
      matrix[3][2] = translate.z;
      rotate = transformations.rotate;
      u = rotate.x;
      v = rotate.y;
      w = rotate.z;
      a = rotate.a;
      s = u * u + v * v + w * w;
      c = Math.cos(a);
      i = 1 - c;
      rs = Math.sqrt(s) * Math.sin(a);
      matrix[0][0] *= (u * u + (v * v + w * w) * c) / s;
      matrix[1][0] *= (u * v * i - w * rs) / s;
      matrix[2][0] *= (u * w * i + v * rs) / s;
      matrix[0][1] *= (u * v * i + w * rs) / s;
      matrix[1][1] *= (v * v + (u * u + w * w) * c) / s;
      matrix[2][1] *= (v * w * i - u * rs) / s;
      matrix[0][2] *= (u * w * i - v * rs) / s;
      matrix[1][2] *= (v * w * i + u * rs) / s;
      matrix[2][2] *= (w * w + (u * u + v * v) * c) / s;
      skew = transformations.skew;
      sx = Math.tan(skew.x);
      sy = Math.tan(skew.y);
      matrix[0][1] *= sy;
      matrix[3][0] += translate.y * sx;
      matrix[3][1] += translate.x * sy;
      scale = transformations.scale;
      matrix[0][0] *= scale.x;
      matrix[1][1] *= scale.y;
      return matrix[2][2] *= scale.z;
    },
    rotate: function(a) {
      return this.rotateZ(a);
    },
    rotateX: function(a) {
      return this.rotate3d(1, 0, 0, a);
    },
    rotateY: function(a) {
      return this.rotate3d(0, 1, 0, a);
    },
    rotateZ: function(a) {
      return this.rotate3d(0, 0, 1, a);
    },
    scale: function(x, y) {
      return this.scale3d(x, y);
    },
    scaleX: function(x) {
      return this.scale3d(x);
    },
    scaleY: function(y) {
      if (y == null) {
        y = 1;
      }
      return this._data.transformations.scale.y = y;
    },
    scaleZ: function(z) {
      if (z == null) {
        z = 1;
      }
      return this._data.transformations.scale.z = z;
    },
    skewX: function(x) {
      return this.skew(x);
    },
    skewY: function(y) {
      if (y == null) {
        y = 0;
      }
      return this._data.transformations.skew.y = y;
    },
    translate: function(x, y) {
      return this.translate3d(x, y);
    },
    translateX: function(x) {
      return this.translate3d(x);
    },
    translateY: function(y) {
      if (y == null) {
        y = 0;
      }
      return this._data.transformations.translate.y = y;
    },
    translateZ: function(z) {
      if (z == null) {
        z = 0;
      }
      return this._data.transformations.translate.z = z;
    },
    perspective: function(x) {
      if (x == null) {
        x = 0;
      }
      return this._data.transformations.perspective = x;
    },
    rotate3d: function(x, y, z, a) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      if (a == null) {
        a = 0;
      }
      return this._data.transformations.rotate = {
        x: x,
        y: y,
        z: z,
        a: a
      };
    },
    scale3d: function(x, y, z) {
      if (x == null) {
        x = 1;
      }
      if (y == null) {
        y = 1;
      }
      if (z == null) {
        z = 1;
      }
      return this._data.transformations.scale = {
        x: x,
        y: y,
        z: z
      };
    },
    skew: function(x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      return this._data.transformations.skew = {
        x: x,
        y: y
      };
    },
    translate3d: function(x, y, z) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      return this._data.transformations.translate = {
        x: x,
        y: y,
        z: z
      };
    }
  });

  umd(Matrix);

}).call(this);
